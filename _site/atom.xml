<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>The blog of Giseop Kim</title>
 <link href="http://localhost:4000/atom.xml" rel="self"/>
 <link href="http://localhost:4000"/>
 <updated>2021-03-03T11:35:52+09:00</updated>
 <id>http://localhost:4000</id>
 <author>
   <name>Giseop Kim</name>
   <email>test@example.com</email>
 </author>

 
 <entry>
   <title>SLAM의 뿌리를 찾아서</title>
   <link href="http://localhost:4000/blog/2021/03/02/slam-root.html"/>
   <updated>2021-03-02T00:00:00+09:00</updated>
   <id>http://localhost:4000/blog/2021/03/02/slam-root</id>
   <content type="html">&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;slam의-뿌리를-찾아서-&quot;&gt;&lt;strong&gt;SLAM의 뿌리&lt;/strong&gt;를 찾아서 ...&lt;/h1&gt;
&lt;p&gt;떠나봅시다. &lt;/p&gt;
&lt;p&gt;NOTE: 이 글은 예전에 미디엄에 올린 &amp;lt;SLAM을 SLAM답게 만드는 건 무엇일까?: 내맘대로 SLAM 정의하기&amp;gt; 의 후속편 같은 느낌으로 적어보았습니다. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;참고: &amp;lt;SLAM을 SLAM답게 만드는 건 무엇일까?: 내맘대로 SLAM 정의하기&amp;gt;&lt;br /&gt;
&lt;a href=&quot;http://bit.ly/define-slam-myself-1&quot;&gt;http://bit.ly/define-slam-myself-1&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;SLAM의 본질이 어디에 있는지 파악하고&lt;br /&gt;
하나씩 끝말잇기 하듯이&lt;br /&gt;
그 다음 뿌리를 향해 나아가봅시다. &lt;/p&gt;
&lt;p&gt;레츠고 ...&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;1&quot;&gt;1.&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;SLAM은 &lt;strong&gt;&lt;em&gt;Estimation&lt;/em&gt;&lt;/strong&gt; 이다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;따라서 MLE, MAP 와 같은 이야기가 나온다. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;더 나아가 SLAM문제를 Gaussian noise 기반으로 probabilistic 하게 formulating 하는 건 거의 시초라고도 (이자 SLAM문제의 코어) 할 수 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt; R. C. Smith and P. Cheeseman. On the representation and estimation of spatial uncertainty. IJRR. 1986. &lt;/li&gt;
&lt;li&gt; Smith, Self, and Cheesemans, Estimating Uncertain Spatial Relationships in Robotics, 1990 &lt;/li&gt;
&lt;li&gt; filtering 으로 풀든 optimization으로 풀든 공통으로 해당되는 중요한 내용이다. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;2&quot;&gt;2.&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;SLAM은 &lt;strong&gt;&lt;em&gt;State&lt;/em&gt;&lt;/strong&gt; estimation 이다. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;여기서 state란 어떤 것이든 될 수 있지만, 통상적으로 우리는 알고싶은 것은 robot 과 world (map) 의 pose (즉, position + rotation) 이다. &lt;ul&gt;
&lt;li&gt; 근데 state estimation 은 1. filtering 기반, 2. optimization 기반으로 나눌 수 있는데, 특히 이 글에서는 optimization기반의 SLAM의 뿌리에 대해 찾아가보자 ... &lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;물론 velocity, bias, semantic class 등 추론하고 싶은 어떤 것도 state가 될수는 있다 (사실 state라는 것은 수학적으로 확률변수-randome variable- 이기 때문에!). &lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;3&quot;&gt;3.&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;SLAM은 &lt;strong&gt;&lt;em&gt;Optimization-based&lt;/em&gt;&lt;/strong&gt; state estimation 이다. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;iteratively 해를 구하는 것이 골자. &lt;ul&gt;
&lt;li&gt; 특히 SLAM은 overdetermined system (measurement 수가 variable 수보다 많음) 이기 때문에 closed form으로 해를 구할 수 없어서 iterative optimization으로 답을 구해야 한다.  &lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;그래서 기본적으로 SLAM공부에 있어 (computer vision과 마찬가지로) GN, LM 등이 빠질 수 없다. &lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;4&quot;&gt;4.&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;SLAM은 &lt;strong&gt;&lt;em&gt;Nonlinear&lt;/em&gt;&lt;/strong&gt; optimization-based state estimation 이다. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;센서데이터의 measurement model 이 주로 nonlinear 하기 때문&lt;/li&gt;
&lt;li&gt;따라서 linearize, Jacobian 등의 말이 많이 등장한다. &lt;/li&gt;
&lt;li&gt;이 정의와 같은 의미로 Factor graph-based SLAM 이다~ 라는 말도 자주 쓰인다. &lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;5&quot;&gt;5.&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;SLAM은 &lt;strong&gt;&lt;em&gt;Sparse&lt;/em&gt;&lt;/strong&gt; nonlinear optimization-based state estimation 이다. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;SLAM에서는 하나의 measurement 에는 적은 수의 variable 만이 관여하기 때문. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt; 예를 들어, 아주 많은 수의 node들이 system에 있다고 하더라도 하나의 odometry measurement는 직전 node와 현재 node 만이 관여한다. 따라서 전체 measurement block들을 쌓은 Jacobian matrix 는 매우 sparse 해진다. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;또한, SLAM에서는 알고싶은 state (variable) 의 개수 보다 measurement 의 수가 훨씬 많기 때문에 더 sparse 해진다. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;따라서 sparsity 를 잘 이용하기 위해서 variable re-ordering 같은 이야기가 나온다. 여기 5번 항목까지가 Square-root SAM 논문의 내용이라고 봐도 무방하다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt; Frank Dellaert, and Michael Kaess. &quot;Square Root SAM: Simultaneous localization and mapping via square root information smoothing.&quot;, IJRR 2006&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;6&quot;&gt;6.&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;SLAM은 sparse nonlinear optimization-based state estimation &lt;strong&gt;&lt;em&gt;in an incremental setting&lt;/em&gt;&lt;/strong&gt; &amp;nbsp; 이다. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;센서데이터는 순차적으로 들어오기 때문에, 이전 계산 값을 이용해야 시간적으로 효율적이다. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;또한 SLAM은 nonlinear problem 이기 때문에 이전 계산 값을 이용해야 local minima 에 빠지는 것을 방지할 수 있어 성능적으로 효과적이다. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt; 여기까지가 isam1 의 내용이다 (08 TRO iSAM: Incremental smoothing and mapping)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;7&quot;&gt;7.&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;SLAM은 sparse nonlinear optimization-based state estimation in an incremental setting &lt;strong&gt;&lt;em&gt;by connecting between graphical model and sparse linear algebra perspective&lt;/em&gt;&lt;/strong&gt; &amp;nbsp; 이다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Squared Root SAM및 isam 까지는 실제 solver 는 선형대수적으로 풀었지만, Bayes tree기반의 isam2로 넘어올 수 있었던 것은 matrix 가 실제로 graphically 어떤 의미를 가지는 지를 (Kaess and Dellaert‬님께서) 이해하고 있었기 때문임.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Information matrix 는 그 의미가 사실 MRF이고, ... 이런 것에 대한 이야기들. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt; 여기까지가 isam2 의 내용이다 (12 IJRR iSAM2: Incremental Smoothing and Mapping Using the Bayes Tree). 또한 Factor Graphs for Robot Perception 책에서도 잘 서술되어 있다. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;8&quot;&gt;8.&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;SLAM은 sparse nonlinear optimization-based state estimation in an incremental setting by connecting between graphical model and sparse linear algebra perspective &lt;strong&gt;&lt;em&gt;on a manifold space&lt;/em&gt;&lt;/strong&gt; &amp;nbsp; 이다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;SLAM에서 관심있는 state는 거의 pose인데 여기서 rotation 부분이 nonlinear 함. 따라서 해를 update 하는 공간을 manifold 로 삼을 필요가 있음.   &lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;9&quot;&gt;9.&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;SLAM은 sparse nonlinear optimization-based state estimation in an incremental setting by connecting between graphical model and sparse linear algebra perspective on a manifold space &lt;strong&gt;&lt;em&gt;by integrating multiple sensors’ data&lt;/em&gt;&lt;/strong&gt; &amp;nbsp; 이다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;front-end에 관한 이야기이다. &lt;/li&gt;
&lt;li&gt;SLAM은 수중, 지하, 지상, 공중 등 다양한 환경에서 로봇이 활동(navigation)하는 것에 모두 관심사가 있음. 그런데 환경의 특성마다 적합한 센서가 다르고 (수중은 Sonar센서 등) 이들을 퓨전해야 할 필요가 있음. &lt;ul&gt;
&lt;li&gt; 따라서 SLAM 엔지니어는 어떤 센서가 본인의 로봇이 활동하고자 하는 환경에 적합한지 이해하고, 선정하고, 융합할 수 있어야 함. &lt;/li&gt;
&lt;li&gt; 특히 카메라 센서 기반의 SLAM을 하는경우 multiple-view geometry를 공부해야 하는데 그 이유가 여기 9번에 해당하는 내용. &lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;10&quot;&gt;10.&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;SLAM은 sparse nonlinear optimization-based state estimation in an incremental setting by connecting between graphical model and sparse linear algebra perspective on a manifold space by integrating multiple sensors’ data &lt;strong&gt;&lt;em&gt;with robust data associations&lt;/em&gt;&lt;/strong&gt; &amp;nbsp; 이다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;front-end 에서는 data association (DA) 이 아닌 것이 없다. local feature matching 부터 loop detection 까지, 결국 모든 것이 이거랑 제일 가까운 애가 누구냐? 에 대답하는 문제. &lt;/li&gt;
&lt;li&gt;근데 이게 100% 정확할 수 없기 때문에 두 가지 방향에서의 노력이 요구된다. &lt;ul&gt;
&lt;li&gt;먼저 그럼에도 더 실수없이 잘 할 수 있도록 더 좋은 DA를 해야하고, &lt;/li&gt;
&lt;li&gt;두 번째로 DA에 실수가 있음에도 불구하고, solution이 망가지지 않도록 back-end에서 강건하게 막아줄 수 있어야 한다. MIT의 Luca Carlone 교수님이 이 분야에서 최근 많은 연구를 하고 있다. &lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;11&quot;&gt;11.&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;SLAM은 sparse nonlinear optimization-based state estimation in an incremental setting by connecting between graphical model and sparse linear algebra perspective on a manifold space by integrating multiple sensors’ data with robust data associations, &lt;strong&gt;&lt;em&gt;for multiple robots&lt;/em&gt;&lt;/strong&gt; &amp;nbsp; 이다. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;robot mission 이 결국 multi-robot 이 팀을 이루어 미션을 수행하는 경우가 많음. &lt;/li&gt;
&lt;li&gt;멀티 로봇의 경우, 또 communication, coordinate 등 다양한 것들이 고려되어야 함. &lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;12-to-be-added-tba-&quot;&gt;12. To be added (TBA) ...&lt;/h4&gt;
&lt;hr /&gt;

&lt;p&gt;대충 여기까지 와보았습니다.&lt;br /&gt;
깊고도 넓은 SLAM의 세계!&lt;br /&gt;
그럼 20000!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>SegMap 빌드하기</title>
   <link href="http://localhost:4000/blog/2021/03/02/segmap-build.html"/>
   <updated>2021-03-02T00:00:00+09:00</updated>
   <id>http://localhost:4000/blog/2021/03/02/segmap-build</id>
   <content type="html">&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;NOTE: &lt;a href=&quot;https://gisbi.medium.com/segmap-%EB%B9%8C%EB%93%9C%ED%95%98%EA%B8%B0-220d6d9b4ef6&quot;&gt;미디엄 블로그&lt;/a&gt; 이전중입니다&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;목표&quot;&gt;목표&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;segmap 을 빌드해보자.&lt;/li&gt;
  &lt;li&gt;작업환경: Ubuntu18.04, ROS 는 root (not virtual)로 설치한 상황이며 나머지 디펜던시는 모두 virtualenv에서 진행 (아래에 자세히 설명함)&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;배경지식&quot;&gt;배경지식&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;원래는 segmatch라는 리포였다가 (17 ICRA 시절) 이름이 segmap (18 RSS 시절) 으로 바뀌었다.&lt;/li&gt;
  &lt;li&gt;segmap 공식 리포 (ethz-asl/segmap) 의 경우 빌드하려면 딥러닝 기반 segmap말고 안딥러닝인 segmatch를 쓰고 싶어도 tensorflow_ros_cpp 를 무적권 빌드해야해서 너무 불키하다.&lt;/li&gt;
  &lt;li&gt;그래서 인터넷에 segmatch 포크본들이 돌아다니고 있어서 해보니까 왠지 안된다.&lt;/li&gt;
  &lt;li&gt;그래서 그냥 공식리포본에서 tensorflow_ros_cpp 를 빌드를 어찌저찌 해내기로 결심하였다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;과정&quot;&gt;과정&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;수많은 삽질들이 있었으나 작동하는 사항만을 아래 기술해보자.&lt;/li&gt;
  &lt;li&gt;일단 모든 과정들을 virtual env 에서 하면 된다. (모든 캣킨 빌드들 및 로스실행 포함). tf 를 virtualenv 에서 설치하는 게 편하기 때문.&lt;/li&gt;
  &lt;li&gt;일단 segmap 저자의 리드미에서 하라는 순서로 해도되지만, 내 기준에 먼저 해놓으면 좋은것부터 이제 설명해보자.&lt;/li&gt;
  &lt;li&gt;일단 작업할 virtual environment 를 만들자.&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- ```  --&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;virtualenv ~/segmapenv &lt;span class=&quot;c&quot;&gt;# 하면 만들어지고&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt; ~/segmapenv/bin/activate &lt;span class=&quot;c&quot;&gt;# 하면 접속됨 (conda activate 같은 것 같다). 그러면 앞에 (env name) 이 뜬다&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;segmapenv&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;# 예시 &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;!-- ```  --&gt;

&lt;ul&gt;
  &lt;li&gt;그럼 ~/segmapenv 에 대충 mkdir home 해서 home 밑에서 작업해보자&lt;/li&gt;
  &lt;li&gt;이제 tensorflow 를 설치해야 한다.&lt;/li&gt;
  &lt;li&gt;간편하게 pip install 하면 안되냐 싶겠지만 segmap 이 쓰고 있는 tensorflow_ros_cpp 라는 모듈이 그러면 안된다.&lt;/li&gt;
  &lt;li&gt;간단히 이유를 설명하자면 tf를 설치하는 방법에는 세가지가 있다. 1. pip, 2. bazel, 3. tensorflow_catkin&lt;/li&gt;
  &lt;li&gt;1은 잘 알테고 (하지만 지금 이걸로 설치하면 마지막에 API가 달라서? segmapper 가 링크가 안된다 — 다른 디펜던시 컴파일 20분(-j32의 경우)~2시간 겨우겨우 기다리고 마지막에 빌드 에러나는 환장하는 상황을 볼 수 있다), 3은 몰라도 되고 (궁금하면 따로 찾아보자)&lt;/li&gt;
  &lt;li&gt;결론은 2번 방법인 bazel 로 설치해야 한다. bazel은 구글이 만든 빌드툴 어쩌구 저쩌구… 그렇다고 한다. 뭐 자세히 알필요는 없고&lt;/li&gt;
  &lt;li&gt;암튼 2로 해야 하는이유는 tensorflow_ros_cpp 의 깃 리포에 가보면 표들이 있는데 https://github.com/tradr-project/tensorflow_ros_cpp&lt;/li&gt;
  &lt;li&gt;Ubuntu 18.04 64bits, Python 2.7.6, ROS Melodic 의 경우 1.8.0 tf version을 사용할 시 bazel cpu 및 gpu 에만 체크표시가 되어있다. 여기 보면 ABI difference problems 라는 말이 나오는데 이게 위에서 말한 20분 기다리고 마지막에 에러날때 볼 수 있는 현상이다. 이 고생을 안하려면 무적권 bazel 로 설치하자.&lt;/li&gt;
  &lt;li&gt;https://github.com/tradr-project/tensorflow_ros_cpp#custom-compilation-of-tensorflow-using-bazel 를 읽어보자.&lt;/li&gt;
  &lt;li&gt;그나저나 일단 tf src를 받아야 한다. https://www.tensorflow.org/install/source?hl=ko 여기 잘 나와있음.&lt;/li&gt;
  &lt;li&gt;그래도 굳이 명령어들을 다시 적어주자면&lt;/li&gt;
  &lt;li&gt;cd ~/sgmapenv/home하고, 여기다가 tensorflow 를 받자&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;segmapenv&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git clone https://github.com/tensorflow/tensorflow.git&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;segmap저자는 1.8.0 을 쓰라고 하니 (언제적 버전이지만…) 시키는 대로 하자. 해당 브랜치로 변경해주어야 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;segmapenv&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git checkout r1.8&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;직접 빌드하는경우 configuration 을 정해줘야 하므로 ./configure 하자. 근데 계속 엔터를 갈기면 된다. 즉 디폴트 옵션으로 하면됨.&lt;/li&gt;
  &lt;li&gt;우리는 1.8.0 을 빌드할것이므로&lt;/li&gt;
  &lt;li&gt;그리고 cpu 버전으로 일단 빌드하고 있다. 내 목표는 segmap까지도 필요없고 segmatch만 쓰는 것이므로…&lt;/li&gt;
  &lt;li&gt;따라서 다음 명령어를 해주면 된다. 고 나와있다. (근데 일케 하지마시오)&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;segmapenv&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bazel build &lt;span class=&quot;nt&quot;&gt;--config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;opt //tensorflow/tools/pip_package:build_pip_package &lt;span class=&quot;c&quot;&gt;# 이 때 저 // 까지 모두 포함해서 한줄로 써주면 된다. 헷갈리면 다시 여기를 보자 https://www.tensorflow.org/install/source?hl=ko&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;근데 이대로 하면 안됨. 안된다. 안된다. 안된다. 안된다. 안된다.&lt;/li&gt;
  &lt;li&gt;https://www.tensorflow.org/install/source?hl=ko 여기서 하려고 하는거는 빌드를 직접 내 입맛에 맞는 configuration 으로 해서 결국에는 pip 패키지를 만들려고 하는건데&lt;/li&gt;
  &lt;li&gt;우리의 목표는 아예 pip 패키지 아니기 때문. segmap 리드미에 pip 로 설치하라 되어있는데 안됨&lt;/li&gt;
  &lt;li&gt;그래서 tensorflow_ros_cpp 의 리드미를 잘 읽어야 한다. 진짜루&lt;/li&gt;
  &lt;li&gt;https://github.com/tradr-project/tensorflow_ros_cpp#custom-compilation-of-tensorflow-using-bazel&lt;/li&gt;
  &lt;li&gt;이걸 미리 읽지않고 이틀을 날린 내 자신에게 반성을…&lt;/li&gt;
  &lt;li&gt;여기보면 뭐라 되어있냐면&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Follow the Installing TensorFlow from Sources guide up to “Configure the installation” (including), and build the C++ library with the following command:
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bazel build --config=opt --define framework_shared_object=false tensorflow:libtensorflow_cc.so&lt;/code&gt; You don’t need to continue with the guide building or installing the pip package (but you might be interested, because a custom-built tensorflow can provide you with higher performance even in Python).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;그니껜 bazel을 쓰긴 쓸건데 https://www.tensorflow.org/install/source?hl=ko 있는대로 할필요 없다는 뜻임&lt;/li&gt;
  &lt;li&gt;그리고 bazel build 뒤에 붙은 옵션들도 tf site에 있는 것과 다른데 절대 위의 명령어로 해주어야 한다.&lt;/li&gt;
  &lt;li&gt;중요하니까 한번더 복붙&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;segmapenv&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bazel build &lt;span class=&quot;nt&quot;&gt;--config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;opt &lt;span class=&quot;nt&quot;&gt;--define&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;framework_shared_object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;false &lt;/span&gt;tensorflow:libtensorflow_cc.so&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;근데 이 bazel build 라는 놈이 안될수 있다. 왜냐하면 bazel 이라는게 2018년 부터 발전해와서 API가 엄청 달라진듯 버전마다 (뇌피셜)&lt;/li&gt;
  &lt;li&gt;암튼 여기 잘나와 있다 http://nblog.syszone.co.kr/archives/9751&lt;/li&gt;
  &lt;li&gt;한줄요약 하면 tensorflow-1.8.0 를 bazel로 빌드하려면 Bazel 0.10.0 을 써야됨&lt;/li&gt;
  &lt;li&gt;다양한 bazel 버전들은 bazel 공식 깃 리포에 있으며 0.10.0 버전은 https://github.com/bazelbuild/bazel/releases/tag/0.10.0&lt;/li&gt;
  &lt;li&gt;여기서 아마 bazel-0.10.0-without-jdk-installer-linux-x86_64.sh 이거 아니면 bazel-0.10.0-installer-linux-x86_64.sh 이거를 설치하면 됨&lt;/li&gt;
  &lt;li&gt;나는 앞에걸로 한듯 — 근데 암튼 bazel 디펜던시로 jdk 설치해줘야 하는거같다 https://docs.bazel.build/versions/3.3.0/install.html 여기 보면 sudo apt install openjdk-11-jdk 해주자&lt;/li&gt;
  &lt;li&gt;일단 지금 다시 상기하자면 지금 virtualenv 가 activate 된 home 에서 하고 있음&lt;/li&gt;
  &lt;li&gt;chmod +x bazel-0.10.0-without-jdk-installer-linux-x86_64.sh 하고 ./bazel-0.10.0-without-jdk-installer-linux-x86_64.sh 하면 금방 깔린다.&lt;/li&gt;
  &lt;li&gt;그리고 나서 이제 다시 아까 하려면 걸 다시해주면 (아래 명령어)&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;segmapenv&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bazel build &lt;span class=&quot;nt&quot;&gt;--config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;opt &lt;span class=&quot;nt&quot;&gt;--define&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;framework_shared_object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;false &lt;/span&gt;tensorflow:libtensorflow_cc.so&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;이거는 거의 1분 안되어서 금방 끝난다. 컴퓨터 사양마다 다를수있음.&lt;/li&gt;
  &lt;li&gt;암튼 이러면 어딘가에 libtensorflow_cc.so 가 생성되어있다. tensorflow_ros_cpp 는 cmakelist.txt 에 보면 이 so 파일을 찾아다가 빌드하는 식이다.&lt;/li&gt;
  &lt;li&gt;ㅇㅋ 그럼 이제는 tensorflow_ros_cpp 를 빌드해야 하니까 catkin ws 밑에 src에 이 리포를 받아주자&lt;/li&gt;
  &lt;li&gt;근데 여기서부터는 segmap저자가 필요한 디펜던시들을 한방에 모조리 git clone 해올수 있도록 wstool 로 잘 해놨으니 tensorflow_ros_cpp 도 받는 김에 다 받아오자.&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;segmapenv&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; YOUR_VIRTUAL_ENV_PATH/home/segmap_ws/src
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;segmapenv&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;YOUR_VIRTUAL_ENV_PATH/home/segmap_ws/
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;segmapenv&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;catkin init
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;segmapenv&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;catkin config &lt;span class=&quot;nt&quot;&gt;--merge-devel&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;segmapenv&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;catkin config &lt;span class=&quot;nt&quot;&gt;--cmake-args&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-DCMAKE_BUILD_TYPE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;Release
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;segmapenv&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;src
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;segmapenv&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git clone https://github.com/ethz-asl/segmap.git
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;segmapenv&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;wstool init
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;segmapenv&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;wstool merge segmap/dependencies.rosinstall
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;segmapenv&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;wstool update&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;이제 segmap_ws위치에서 catkin build tensorflow_ros_cpp 를 해서 tensorflow_ros_cpp 만 컴파일 해준다.&lt;/li&gt;
  &lt;li&gt;segmap 저자가 시키는대로 하면 https://github.com/ethz-asl/segmap/wiki/FAQ#q-issues-compiling-tensorflow_ros_cpp&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;segmappyenv&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;catkin build tensorflow_ros_cpp &lt;span class=&quot;nt&quot;&gt;--cmake-args&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-DFORCE_TF_PIP_SEARCH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ON&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;라고 해서 뒤에 이상한 옵션들이 더 붙는데 이거는 pip 도 찾긴찾을래? 라는 거 므로 사실 ON으로 하면 안된다. segmap_ws/src/tensorflow_ros_cpp 밑에 CMakeLists.txt 가 있는데 거기서 bazel 말고 다른애들을 찾을 가능성을 다 off 해주자. 즉&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cmake&quot; data-lang=&quot;cmake&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# variables affecting the search for the tensorflow library&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;FORCE_TF_PIP_SEARCH OFF CACHE BOOL “Whether to search for pip-installed Tensorflow even on systems using C++11 ABI”&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;DISABLE_TF_PIP_SEARCH ON CACHE BOOL “Whether to skip search for pip-installed Tensorflow”&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;FORCE_TF_BAZEL_SEARCH ON CACHE BOOL “Whether to search for bazel-compiled Tensorflow even if tensorflow was already found”&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;DISABLE_TF_BAZEL_SEARCH OFF CACHE BOOL “Whether to skip search for bazel-compiled Tensorflow”&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;FORCE_TF_CATKIN_SEARCH OFF CACHE BOOL “Whether to search for tensorflow_catkin even if tensorflow was already found”&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;DISABLE_TF_CATKIN_SEARCH ON CACHE BOOL “Whether to skip search for tensorflow_catkin”&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;그리고 그 좀 아래에 보면 bazel로 tensorflow_ros_cpp를 빌드 할때 두 가지를 얘가 끌어다가 쓰는 걸 알수있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cmake&quot; data-lang=&quot;cmake&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# variables affecting bazel search&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;TF_BAZEL_LIBRARY “{CATKIN_DEVEL_PREFIX}/../libtensorflow_cc.so” CACHE STRING “Path to the bazel-compiled Tensorflow C++ library”&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;TF_BAZEL_SRC_DIR “{CATKIN_DEVEL_PREFIX}/../tensorflow-include-base” CACHE STRING “Path to the Tensorflow sources directory”&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;즉 .so 파일과 tensorflow source 가 필요한건데 tensorflow source 의 경로는 지금 어쩌구…../tensorflow-include-base 라고 되어있는데 귀찮으니까 절대경로로 바꿔주자. 아까 tensorflow git clone 했던 그 디렉토리를 해주면 된다.&lt;/li&gt;
  &lt;li&gt;그럼 이제 아까 bazel build 로 만든 .so 파일이 어딘가 있는데 일단 대충 탐색기에서보면 못찾겠다. 이때 find 명령어를 써주자&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;segmapenv&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; / 
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;segmapenv&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;find &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-name&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;libtensorflow_cc.so&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;해주니까 이상한 bazel의 숨김폴더 밑에 존재하는 걸 확인할 수 있었다.&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;./home/user/.cache/bazel/_bazel_user/f61ec775ae98149c983e28ce5aff1318/execroot/org_tensorflow/bazel-out/k8-opt/bin/tensorflow/libtensorflow_cc.so.runfiles/org_tensorflow/tensorflow/libtensorflow_cc.so
./home/user/.cache/bazel/_bazel_user/f61ec775ae98149c983e28ce5aff1318/execroot/org_tensorflow/bazel-out/k8-opt/bin/tensorflow/libtensorflow_cc.so&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;segmapenv&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo cp&lt;/span&gt; ./home/user/.cache/bazel/_bazel_user/f61ec775ae98149c983e28ce5aff1318/execroot/org_tensorflow/bazel-out/k8-opt/bin/tensorflow/libtensorflow_cc.so &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;어딘가붙여넣을경로&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;해서 보기좋은 곳으로 옮겨주자&lt;/li&gt;
  &lt;li&gt;그리고 다시 segmap_ws/src/tensorflow_ros_cpp 의 CMakeLists.txt 로 돌아가서 .so 를 찾는 라인에 경로를 저 내가 복사해놓은 어딘가붙여넣을 경로 로 바꿔주면 된다.&lt;/li&gt;
  &lt;li&gt;근데 기본적으로 {CATKIN_DEVEL_PREFIX}/../libtensorflow_cc.so 라고 되어 있는데 이거는 catkin workspace (devel, build, src있는 그 경로) 경로를 의미한다. 나는 cmakelist 에 저 - - 라인을 바꾸기 귀찮아서 so파일을 아예 workspace (devel build src와 같은 위치) 에 복사해버림.&lt;/li&gt;
  &lt;li&gt;그러고 나서 (아참 catkin_tools 를 미리 설치해야 함 그래야 catkin build 를 쓸수있음)&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;segmapenv&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;catkin build tensorflow_ros_cpp&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;하니까 한 30초 안걸려서 빌드가 다 됐다.&lt;/li&gt;
  &lt;li&gt;이제 진짜 마지막으로 아래 명령어를 해주면&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;segmapenv&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;catkin build segmapper&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;segmapper 및 segmapper 가 필요로 하는 디펜던시들이 모두 컴파일이 된다.&lt;/li&gt;
  &lt;li&gt;근데 pcl_catkin 이랑 gtsam이 진짜 개오래 걸린다. 그래서 조금이라도 더 빨리 해주기 위해서&lt;/li&gt;
  &lt;li&gt;나는 i9–9900 을 사용중이어서 코어가 16개 (virtual로는 총 32개) 여서&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;segmapenv&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;catkin build segmapper &lt;span class=&quot;nt&quot;&gt;-j32&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;라고 해주었다.&lt;/li&gt;
  &lt;li&gt;그러면 20분정도 걸린다. 램은 많이 쓸때는 40G까지 올라간듯 (64기가 장착중)&lt;/li&gt;
  &lt;li&gt;코어가 많아도 램딸리면 터질수있으니 이거는 자기 시스템에 맞게 조절바람.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;그러면 마지막에&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;이런 화면이 뜨면 모두가 잘 빌드가 된것이다! ㅠㅠ&lt;/li&gt;
&lt;/ul&gt;
&lt;figure&gt;
  &lt;img src=&quot;/figs/2021-03-02-segmap-build/img1.png&quot; alt=&quot;img1&quot; style=&quot;width:100%&quot; /&gt;
  &lt;figcaption&gt; &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;span&gt;&lt;/span&gt;
&lt;!-- &lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;/figs/2021-03-02-segmap-build/img1.png&quot; width=700&gt;&lt;/p&gt; --&gt;
&lt;!-- ![dsf](/logo.png) --&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;segmapenv&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;source &lt;/span&gt;devel/setup.bash&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;를 해주고&lt;/li&gt;
  &lt;li&gt;저자가 올려둔 데이터 (KITTI 00 번과 05번, 각 16G, 10G) 를 http://robotics.ethz.ch/~asl-datasets/segmap/segmap_data/ 여기서 받아서 적절한 위치에 bag file 을 놓아두고&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;segmapenv&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;roslaunch segmapper kitti_loop_closure.launch&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;하면 되는데 gedit kitti_loop_closure.launch 해서 여기보면 bagfile 경로를 지정하게 되어있다. 그거를 내가 위치시킨 경로로 바꿔주면 아마 실행 될것임.&lt;/li&gt;
  &lt;li&gt;참고로 kitti_loop_closure.launch 가 17 ICRA의 segmatch이고 cnn_kitti_loop_closure.launch가 18 RSS의 segmap 이다. (암튼 segmatch를 쓰고싶어도 tensorflow_ros_cpp를 컴파일해야했던 ㅠㅠ)&lt;/li&gt;
  &lt;li&gt;근데 틀면 기본적으로 rviz 에서는 아무것도 안보여지는데 저자가 올려둔 rviz config 파일을 같이 틀어야 아마 보여질듯 http://robotics.ethz.ch/~asl-datasets/segmap/segmap_data/kitti/&lt;/li&gt;
  &lt;li&gt;근데 귀찮으니까 그냥 왼쪽 아래에서 add 해주고 target/representation인가…? 이거를 틀면 잘 실행되고 있음을 알 수 있다. 자세한건 정광욱님의 플레이 영상을 보면 참고가 됨. https://www.youtube.com/watch?v=Hb7Agk8fs10&amp;amp;t=3s&lt;/li&gt;
  &lt;li&gt;05번을 다 돌아보았다.&lt;/li&gt;
&lt;/ul&gt;

&lt;figure&gt;
  &lt;img src=&quot;/figs/2021-03-02-segmap-build/img2.png&quot; alt=&quot;img2&quot; style=&quot;width:100%&quot; /&gt;
  &lt;figcaption&gt; &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;그나저나 다 돌고 런치파일을 실행한 터미널을 ctrl+C 하면 알아서 로그 파일과 결과파일을 /tmp/ 어딘가에 저장해준다. (어디 저장했다고 경로가 뜸)&lt;/li&gt;
  &lt;li&gt;암튼 돌리기 성공!&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;결론&quot;&gt;결론&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;segmatch를 돌려보았다.&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>블로그 시작!</title>
   <link href="http://localhost:4000/blog/2021/03/01/blog-start.html"/>
   <updated>2021-03-01T00:00:00+09:00</updated>
   <id>http://localhost:4000/blog/2021/03/01/blog-start</id>
   <content type="html">&lt;p&gt;블로그를 시작해봅니다.&lt;/p&gt;
</content>
 </entry>
 
 
</feed>
